Techincal questions:

Q - 1
var a = 1
function foo(){
 var a = 2
 console.log(a)
}
foo()
console.log(a);

Q - 2
function foo(){
    a = 2
  }
  foo()
  console.log(a);

Q - 3

function outerFunc(outerParam) {
  function innerFunc(innerParam) {
     outerParam["b"] = innerParam;
  }
  return innerFunc;
}

const obj = {a:1}
const example = outerFunc(obj);
const answer = example(2)
console.log(obj);

Q-4
let arr =[1,2]
function test(array){
  array.push(3)
}
test(arr)
console.log(arr)

Q-5

const carDetails = {
    name: "Tomer",
    getName(){
       return this.name;
    },
  };
  var name = "Joe";
  var getCarName = carDetails.getName;
  console.log(getCarName());

Q-6
console.log(a)
console.log(b)
var a = 2
let b = 2


Q-7
a()
function a(){
    console.log("a")
}
b();
var b =function(){
    console.log("b")
}


Q-8
function x(){
   for(var i=1;i<=5;i++){
      setTimeout(function(){
         console.log(i);
      },
      i*1000);
   }}

x();

Q-9:
function foo() {
  let a = b = 0;
  a++;
  return a;}
foo();


Q-10:
first 3letter normal and others password

Q-11:
function fruit(){
    console.log(name); // undefined
    console.log(price); // caught ReferenceError: 
    var name= "Rathika";
    let price = 20;
}
fruit();

Q-12:
for(var i=1;i<10;i++){
    setTimeout(() => console.log(i),1); // 10
}

Q-13:
for(let i=1;i<10;i++){
    setTimeout(() => console.log(i),1); // 10
}

Q-14:
let data="size";
const brid = {
    size: "small",
};
console.log(brid[data]);
console.log(brid["size"]);
console.log(brid.data);
console.log(brid.size);

Q-15:
let c = {name: "rathika"};
let d;
d = c;
c.name = "jathadad"
console.log(d.name);


Q:16:
var x;
var x=10;
console.log(x);

Q-17:
var x;
let x =10;
console.log(x);

// Error throw

Q-18:
let a =3;
let b = new Number(3);
console.log(a == b);
console.log(a === b);

Q-19:
let name;
name = {};
console.log(name);


Q-20:
function fruit(){
    console.log('dsfsdf');
}
fruit.name = "apple";
console.log(fruit());

Q-21:
function sum(a,b){
    return a = b;
}
console.log(sum(1,'2'))

Q-22:
let i = 0;
console.log(i++);
console.log(++i);

Q-23:
function getAge(args){
    console.log(args); // {'0':23}
}
getAge(23);

Q-24:
function getAge(){
    'use strict'
    age  = 21;
    console.log(age); // Error
}
getAge();

Q-25:
const sum = eval('1+2');
console.log(sum);

Q-26:
sessionStorage.setItem('cool_storage',123);
// still browser closures

Q-27:
const obj = {1 : "a", 2: "b"};
obj.hasOwnProperty("1");
obj.hasOwnProperty(1);

Q-28:
const obj = { a : "a1", b: "b2", a:"repeat"};
console.log(obj);

Q-29:
for(let i=1;i<5;i++){
    if(i === 3) continue;
    console.log(i);
}

Q-30:
const a = () => console.log('1');
const b = () => setTimeout(() => console.log('2'));
const c = () => console.log('3');
b();
a();
c();

Q-31:
<div onClick="console.log('1')">
<div onClick="console.log('2')">
<button onClick="console.log('3')">
</div>
</div>

3
2
1

Q-32:
const person = {name:'rathika'};

function sayHi(age){
    return `${this.name} is ${age}`
}

console.log(sayHi.call(person,21));
console.log(sayHi.bind(person,21));

Q-33:
function sayHi() {
    return (() => 0)();
}
output: 0

Q-34:
function sayHi() {
    return () => 0;
} 
console.log(sayHi()); // () => 0
console.log(sayHi()()) // 0

Q-35:
const  numbers = [1,2,3];
numbers[9] = 4;
console.log(numbers);

[1, 2, 3, empty × 6, 4]

Q-36:
x = 2; 
function abc() {​​​​​
    console.log(x);
    var x;
}​​​​​ abc();

Q-37:
function testTimeOut() {​​​​​
        for (var i = 1; i<=3; i++){​​​​​
            setTimeout(function () {​​​​​
                 console.log(i)
            }​​​​​, 1000)
        }​​​​​
    }​​​​​

